//DO NOT ADD MORE INSTRUCTIONS HERE WITHOUT CAUTION
//THE VECTOR TABLE HAS A HARDCODED OFFSET OF 4 FROM THIS FUNCTION
export fn _reset() linksection(".reset") callconv(.naked) noreturn {
    asm volatile (
        \\ j _start
    );
}

//stack_top is defined in the linker script, which is automatically generated by zig build.
export fn _start() callconv(.naked) noreturn {
    asm volatile (
        \\ la sp, stack_top
        \\ call main
        \\ ebreak
    );
}

export fn __defaultISR() callconv(.naked) void {
    asm volatile (
        \\li x20, 25
        \\ebreak
    );
}

export fn __ISRExceptionCrash() callconv(.naked) void {
    asm volatile (
        \\li x20, 26
        \\ebreak
    );
}

export fn ecall() void {
    var sys_number: u32 = 0;
    var arg1: u32 = 0;
    var arg2: u32 = 0;
    var arg3: u32 = 0;
    var arg4: u32 = 0;
    var arg5: u32 = 0;
    var arg6: u32 = 0;
    var arg7: u32 = 0;

    asm volatile (
        \\ mv %[sys_number], a7
        \\ mv %[arg1], a0;         
        \\ mv %[arg2], a1        
        \\ mv %[arg3], a2         
        \\ mv %[arg4], a3        
        \\ mv %[arg5], a4        
        \\ mv %[arg6], a5 
        \\ mv %[arg7], a6
        : [sys_number] "=r" (sys_number),
          [arg1] "=r" (arg1),
          [arg2] "=r" (arg2),
          [arg3] "=r" (arg3),
          [arg4] "=r" (arg4),
          [arg5] "=r" (arg5),
          [arg6] "=r" (arg6),
          [arg7] "=r" (arg7),
    );

    switch (sys_number) {
        40 => asm volatile (
            \\ebreak
        ),
        else => {},
    }
}

//Thanks to @LowByteProductions on github for this vector table
export fn vector_table() linksection(".vect") callconv(.naked) noreturn {
    asm volatile (
        \\ j __defaultISR /* UserSoftwareInterrupt */
        \\ j __defaultISR /* SupervisorSoftwareInterrupt */
        \\ j __defaultISR /* Reserved0 */
        \\ j __defaultISR /* MachineSoftwareInterrupt */
        \\ j __defaultISR /* UserTimerInterrupt */
        \\ j __defaultISR /* SupervisorTimerInterrupt */
        \\ j __defaultISR /* Reserved1 */
        \\ j __defaultISR /* MachineTimerInterrupt */
        \\ j __defaultISR /* UserExternalInterrupt */
        \\ j __defaultISR /* SupervisorExternalInterrupt */
        \\ j __defaultISR /* Reserved2 */
        \\ j __defaultISR /* MachineExternalInterrupt */
        \\ j __ISRExceptionCrash /* InstructionAddressMisaligned */
        \\ j __ISRExceptionCrash /* InstructionAccessFault */
        \\ j __ISRExceptionCrash /* IllegalInstruction */
        \\ j __defaultISR /* Breakpoint */
        \\ j __ISRExceptionCrash /* LoadAddressMisaligned */
        \\ j __ISRExceptionCrash /* LoadAccessFault */
        \\ j __ISRExceptionCrash /* StoreAMOAddressMisaligned */
        \\ j __ISRExceptionCrash /* StoreAMOAccessFault */
        \\ j __defaultISR /* EnvironmentCallFromUMode */
        \\ j __defaultISR /* EnvironmentCallFromSMode */
        \\ j __defaultISR /* Reserved3 */
        \\ j ecall /* EnvironmentCallFromMMode */
        \\ j __defaultISR /* InstructionPageFault */
        \\ j __ISRExceptionCrash /* LoadPageFault */
        \\ j __defaultISR /* Reserved4 */
        \\ j __ISRExceptionCrash /* StoreAMOPageFault */
    );
}

export fn main() void {
    asm volatile (
        \\li a7, 40
        \\ecall
    );
}
